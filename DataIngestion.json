{
    "name": "DataIngestion",
    "properties": {
        "type": "MappingDataFlow",
        "typeProperties": {
            "sources": [
                {
                    "dataset": {
                        "referenceName": "RawDataTransactions",
                        "type": "DatasetReference"
                    },
                    "name": "RawData"
                },
                {
                    "dataset": {
                        "referenceName": "SilverLayer",
                        "type": "DatasetReference"
                    },
                    "name": "SilverLayerData"
                }
            ],
            "sinks": [
                {
                    "dataset": {
                        "referenceName": "ProductTable",
                        "type": "DatasetReference"
                    },
                    "name": "ProductSink"
                },
                {
                    "dataset": {
                        "referenceName": "SilverLayer",
                        "type": "DatasetReference"
                    },
                    "name": "SilverLayerSink"
                },
                {
                    "dataset": {
                        "referenceName": "CustomerTable",
                        "type": "DatasetReference"
                    },
                    "name": "CustomerSink"
                },
                {
                    "dataset": {
                        "referenceName": "TransactionDetailsTable",
                        "type": "DatasetReference"
                    },
                    "name": "TransactionDetailsSink"
                },
                {
                    "dataset": {
                        "referenceName": "TransactionTable",
                        "type": "DatasetReference"
                    },
                    "name": "TransactionSink"
                },
                {
                    "dataset": {
                        "referenceName": "AzureSqlTable1",
                        "type": "DatasetReference"
                    },
                    "name": "GoldSink"
                },
                {
                    "dataset": {
                        "referenceName": "NullValues",
                        "type": "DatasetReference"
                    },
                    "name": "NullValueSink"
                }
            ],
            "transformations": [
                {
                    "name": "AddColumns",
                    "description": "Transform Columns and add calculated columns"
                },
                {
                    "name": "CheckNull",
                    "description": "Cleaned Data"
                },
                {
                    "name": "CustomerTable",
                    "description": "Split data for Customer"
                },
                {
                    "name": "TransactionTable",
                    "description": "Split data for Transaction"
                },
                {
                    "name": "ProductTable",
                    "description": "Split data for Product table"
                },
                {
                    "name": "TransactionDetailsTable",
                    "description": "Split data for Transactions details"
                },
                {
                    "name": "AggregateTransactions",
                    "description": "Daily Sales Report"
                },
                {
                    "name": "KeepUniqueRows"
                },
                {
                    "name": "CheckifProductExist"
                },
                {
                    "name": "KeepUniqueCustomers"
                },
                {
                    "name": "CheckifCustomerExist"
                },
                {
                    "name": "KeepUniqueRowsTransaction",
                    "description": "KeepUniqueRowsTransaction"
                },
                {
                    "name": "CheckifTransactionExists"
                },
                {
                    "name": "CheckifTransactionsExists"
                },
                {
                    "name": "CheckifDateExists"
                },
                {
                    "name": "CheckIfTransactionIDExists",
                    "description": "Upserting using expressions on columns 'TransactionID'"
                }
            ],
            "scriptLines": [
                "source(output(",
                "          TransactionID as integer,",
                "          TransactionTime as date,",
                "          TransactionStatus as string,",
                "          Amount as double,",
                "          Currency as string,",
                "          IsInternational as boolean,",
                "          CustomerID as integer,",
                "          CustomerName as string,",
                "          CustomerEmail as string,",
                "          CustomerPhone as string,",
                "          CustomerDOB as string,",
                "          CustomerGender as string,",
                "          CustomerAddress as string,",
                "          City as string,",
                "          PostalCode as string,",
                "          Latitude as double,",
                "          Longitude as double,",
                "          Merchant as string,",
                "          MerchantCategory as string,",
                "          CardType as string,",
                "          Balance as double,",
                "          DeviceType as string,",
                "          ProductID as integer,",
                "          ProductName as string,",
                "          ProductCategory as string,",
                "          Quantity as integer,",
                "          UnitPrice as double",
                "     ),",
                "     allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     ignoreNoFilesFound: false,",
                "     documentForm: 'arrayOfDocuments',",
                "     dateFormats: ['yyyy-MM-dd'],",
                "     preferredIntegralType: 'integer',",
                "     preferredFractionalType: 'decimal') ~> RawData",
                "source(allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     inferDriftedColumnTypes: true,",
                "     ignoreNoFilesFound: false,",
                "     format: 'parquet',",
                "     partitionBy('hash', 1)) ~> SilverLayerData",
                "RawData derive(AmountCAD = iif(Currency == 'USD', Amount * 1.35,\r",
                "iif(Currency == 'EUR', Amount * 1.45,\r",
                "iif(Currency == 'GBP', Amount * 1.70,\r",
                "Amount))),",
                "          TransactionDay = dayOfMonth(TransactionTime)) ~> AddColumns",
                "AddColumns split(isNull(Currency) || isNull(TransactionStatus) || isNull(Merchant),",
                "     disjoint: false) ~> CheckNull@(Null, CleanedData)",
                "CheckNull@CleanedData select(mapColumn(",
                "          CustomerID,",
                "          CustomerName,",
                "          CustomerEmail,",
                "          CustomerPhone,",
                "          CustomerDOB,",
                "          CustomerGender,",
                "          CustomerAddress,",
                "          City,",
                "          PostalCode,",
                "          Balance",
                "     ),",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true) ~> CustomerTable",
                "CheckNull@CleanedData select(mapColumn(",
                "          TransactionID,",
                "          TransactionTime,",
                "          TransactionStatus,",
                "          Amount,",
                "          Currency,",
                "          IsInternational,",
                "          CustomerID,",
                "          CustomerName,",
                "          CustomerEmail,",
                "          CustomerPhone,",
                "          CustomerDOB,",
                "          CustomerGender,",
                "          CustomerAddress,",
                "          City,",
                "          PostalCode,",
                "          Latitude,",
                "          Longitude,",
                "          Merchant,",
                "          MerchantCategory,",
                "          CardType,",
                "          Balance,",
                "          DeviceType,",
                "          ProductID,",
                "          ProductName,",
                "          ProductCategory,",
                "          Quantity,",
                "          UnitPrice,",
                "          AmountCAD,",
                "          TransactionDay",
                "     ),",
                "     skipDuplicateMapInputs: false,",
                "     skipDuplicateMapOutputs: false) ~> TransactionTable",
                "CheckNull@CleanedData select(mapColumn(",
                "          ProductID,",
                "          ProductName,",
                "          ProductCategory,",
                "          UnitPrice",
                "     ),",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true) ~> ProductTable",
                "CheckNull@CleanedData select(mapColumn(",
                "          TransactionID,",
                "          Amount,",
                "          Currency,",
                "          IsInternational,",
                "          CustomerID,",
                "          Merchant,",
                "          MerchantCategory,",
                "          CardType,",
                "          ProductID,",
                "          Quantity,",
                "          UnitPrice,",
                "          AmountCAD",
                "     ),",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true) ~> TransactionDetailsTable",
                "CheckNull@CleanedData aggregate(groupBy(Date = TransactionTime),",
                "     NumberofTransactions = count(TransactionID),",
                "          AverageSpendCAD = avg(AmountCAD),",
                "          HighestSpend = max(AmountCAD),",
                "          TotalSpendCAD = sum(AmountCAD),",
                "          UnitsSold = sum(Quantity)) ~> AggregateTransactions",
                "ProductTable aggregate(groupBy(ProductID),",
                "     ProductName = first(ProductName),",
                "          ProductCategory = first(ProductCategory),",
                "          UnitPrice = first(UnitPrice)) ~> KeepUniqueRows",
                "KeepUniqueRows alterRow(upsertIf(!isNull(ProductID))) ~> CheckifProductExist",
                "CustomerTable aggregate(groupBy(CustomerID),",
                "     CustomerEmail = first(CustomerEmail),",
                "          CustomerName = first(CustomerName),",
                "          CustomerPhone = first(CustomerPhone),",
                "          CustomerDOB = first(CustomerDOB),",
                "          CustomerGender = first(CustomerGender),",
                "          City = first(City),",
                "          PostalCode = first(PostalCode),",
                "          Balance = first(Balance)) ~> KeepUniqueCustomers",
                "KeepUniqueCustomers alterRow(upsertIf(!isNull(CustomerID))) ~> CheckifCustomerExist",
                "TransactionTable aggregate(groupBy(TransactionID),",
                "     CustomerID = first(CustomerID),",
                "          TransactionStatus = first(TransactionStatus),",
                "          TransactionTime = first(TransactionTime),",
                "          TransactionDay = first(TransactionDay)) ~> KeepUniqueRowsTransaction",
                "KeepUniqueRowsTransaction alterRow(upsertIf(!isNull(TransactionID))) ~> CheckifTransactionExists",
                "TransactionDetailsTable alterRow(upsertIf(!isNull(TransactionID))) ~> CheckifTransactionsExists",
                "AggregateTransactions alterRow(upsertIf(!isNull(Date))) ~> CheckifDateExists",
                "CheckNull@CleanedData alterRow(upsertIf(!isNull(TransactionID))) ~> CheckIfTransactionIDExists",
                "CheckifProductExist sink(allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     input(",
                "          ProductID as integer,",
                "          ProductName as string,",
                "          ProductCategory as string,",
                "          UnitPrice as decimal(12,2)",
                "     ),",
                "     deletable:false,",
                "     insertable:true,",
                "     updateable:true,",
                "     upsertable:true,",
                "     keys:['ProductID'],",
                "     format: 'table',",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true,",
                "     saveOrder: 2,",
                "     errorHandlingOption: 'stopOnFirstError') ~> ProductSink",
                "CheckIfTransactionIDExists sink(allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     format: 'parquet',",
                "     filePattern:'concat(\\'SilverData\\', formatDateTime(utcnow(),\\'yyyyMMdd_HHmmss\\'), \\'.parquet\\')',",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true,",
                "     saveOrder: 5,",
                "     partitionBy('dynamicRange', 2,",
                "          TransactionID",
                "     )) ~> SilverLayerSink",
                "CheckifCustomerExist sink(allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     input(",
                "          CustomerID as integer,",
                "          CustomerName as string,",
                "          CustomerEmail as string,",
                "          CustomerPhone as string,",
                "          CustomerDOB as timestamp,",
                "          CustomerGender as string,",
                "          CustomerAddress as string,",
                "          City as string,",
                "          PostalCode as string,",
                "          Latitude as decimal(9,6),",
                "          Longitude as decimal(9,6),",
                "          Balance as decimal(12,2)",
                "     ),",
                "     deletable:false,",
                "     insertable:true,",
                "     updateable:false,",
                "     upsertable:true,",
                "     keys:['CustomerID'],",
                "     format: 'table',",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true,",
                "     saveOrder: 1,",
                "     errorHandlingOption: 'stopOnFirstError') ~> CustomerSink",
                "CheckifTransactionsExists sink(allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     input(",
                "          DetailID as integer,",
                "          TransactionID as integer,",
                "          ProductID as integer,",
                "          CustomerID as integer,",
                "          Amount as decimal(12,2),",
                "          Currency as string,",
                "          AmountCAD as decimal(12,2),",
                "          IsInternational as boolean,",
                "          Merchant as string,",
                "          MerchantCategory as string,",
                "          CardType as string,",
                "          Quantity as integer,",
                "          UnitPrice as decimal(12,2)",
                "     ),",
                "     deletable:false,",
                "     insertable:true,",
                "     updateable:false,",
                "     upsertable:true,",
                "     keys:['TransactionID'],",
                "     format: 'table',",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true,",
                "     saveOrder: 4,",
                "     errorHandlingOption: 'stopOnFirstError',",
                "     mapColumn(",
                "          TransactionID,",
                "          ProductID,",
                "          CustomerID,",
                "          Amount,",
                "          Currency,",
                "          AmountCAD,",
                "          IsInternational,",
                "          Merchant,",
                "          MerchantCategory,",
                "          CardType,",
                "          Quantity,",
                "          UnitPrice",
                "     )) ~> TransactionDetailsSink",
                "CheckifTransactionExists sink(allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     input(",
                "          TransactionID as integer,",
                "          CustomerID as integer,",
                "          TransactionTime as timestamp,",
                "          TransactionDay as integer,",
                "          TransactionStatus as string",
                "     ),",
                "     deletable:false,",
                "     insertable:true,",
                "     updateable:false,",
                "     upsertable:true,",
                "     keys:['TransactionID'],",
                "     format: 'table',",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true,",
                "     saveOrder: 3,",
                "     errorHandlingOption: 'stopOnFirstError') ~> TransactionSink",
                "CheckifDateExists sink(allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     input(",
                "          Date as timestamp,",
                "          NumberofTransactions as integer,",
                "          AverageSpendCAD as decimal(12,2),",
                "          HighestSpend as decimal(12,2),",
                "          TotalSpentCAD as decimal(12,2),",
                "          UnitsSold as integer",
                "     ),",
                "     deletable:false,",
                "     insertable:true,",
                "     updateable:false,",
                "     upsertable:true,",
                "     keys:['Date'],",
                "     format: 'table',",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true,",
                "     saveOrder: 6,",
                "     errorHandlingOption: 'stopOnFirstError') ~> GoldSink",
                "CheckNull@Null sink(allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     format: 'parquet',",
                "     filePattern:'concat(\\'NullRows\\', formatDateTime(utcnow(),\\'yyyyMMdd_HHmmss\\'), \\'.parquet\\')',",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true,",
                "     saveOrder: 7,",
                "     partitionBy('hash', 1)) ~> NullValueSink"
            ]
        }
    }
}